;; helper
(define (snoc fst snd)
  (cons snd fst))
(define (foldl f acc lst)
  (if (null? lst)
     acc
     (foldl f (f acc (car lst)) (cdr lst))))
(define (foldl1 f lst)
  (if (not (null? lst))
    (foldl f (car lst) (cdr lst))))
(define (foldr f acc lst)
  (if (null? lst)
     acc
     (f (car lst) (foldr f acc (cdr lst)))))

;; standard procs
;; boolean
(define (not x)
  (if x #f #t))

;; integer
(define (zero? x) (= x 0))
(define (positive? x) (> x 0))
(define (negative? x) (< x 0))
;; rt lacks primitives for numbers, so we can't use modulo
(define (even? n)
    (if (= n 0) #t
        (odd? (- n 1))))
(define (odd? n)
    (if (= n 0) #f
        (even? (- n 1))))
(define (max . x)
  (define (max2 x y) (if (> x y) x y))
  (foldl1 max2 x))
(define (min . x)
  (define (min2 x y) (if (< x y) x y))
  (foldl1 min2 x))

;; lists
(define (caar x) (car (car x)))
(define (cadr x) (car (cdr x)))
(define (caddr x) (car (cdr (cdr x))))
(define (cadddr x) (car (cdr (cdr (cdr x)))))
(define (caddddr x) (car (cdr (cdr (cdr (cdr x))))))
(define (null? x) (eq? x '()))
;; list? is in rt
;; length is in rt
;; append is in rt
(define (reverse lst)
  (foldl snoc '() lst))
(define (list-tail x k)
    (if (zero? k)
        x
        (list-tail (cdr x) (- k 1))))
(define (list-ref x k)
  (car (list-tail x k)))

;; (list-ref (reverse `(1 2 3 4 ,(+ 4 1))) 3) ; 5
;; (null? '()) ;; #t
;; (min 1 2 3 4 5) ;; 1
;; (apply max '(1 2 3 4 5)) ;; 5
